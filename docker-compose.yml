services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 22181:2181
    healthcheck:
      test: nc -z localhost 2181 || exit -1
      interval: 5s
      timeout: 10s
      retries: 5
    networks:
      - backend


  kafka_0:
    image: confluentinc/cp-kafka:latest
    restart: "unless-stopped"
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka_0:9092,PLAINTEXT_HOST1://kafka:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST1:PLAINTEXT
      KAFKA_CREATE_TOPICS: "dead_letter:1:3, main_topic:1:3"
    healthcheck:
      test: nc -z localhost 9092 || exit -1
      interval: 15s
      timeout: 10s
      retries: 5
    networks:
      - backend
  kafka_1:
    image: confluentinc/cp-kafka:latest
    restart: "unless-stopped"
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka_1:9093,PLAINTEXT_HOST1://kafka:29093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST1:PLAINTEXT
    healthcheck:
      test: nc -z localhost 9093 || exit -1
      interval: 15s
      timeout: 10s
      retries: 5
    networks:
      - backend
  kafka_2:
    image: confluentinc/cp-kafka:latest
    restart: "unless-stopped"
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka_2:9094,PLAINTEXT_HOST1://kafka:29094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST1:PLAINTEXT
    healthcheck:
      test: nc -z localhost 9094 || exit -1
      interval: 15s
      timeout: 10s
      retries: 5
    networks:
      - backend

  consumer:
    build: consumer
    environment:
      - PYTHONUNBUFFERED=1
    networks:
      - backend
    depends_on:
      kafka_0:
        condition: service_healthy
      kafka_1:
        condition: service_healthy
      kafka_2:
        condition: service_healthy

  producer:
    build: producer
    environment:
      - PYTHONUNBUFFERED=1
    depends_on:
      kafka_0:
        condition: service_healthy
      kafka_1:
        condition: service_healthy
      kafka_2:
        condition: service_healthy
    networks:
      - backend
networks:
  backend:
    driver:
      bridge